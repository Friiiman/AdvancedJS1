// TASK 1

/**
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
• Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}

• Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)
*/

const musicCollection = {
    albums: [
        {
            title: "Название альбома1",
            artist: "Исполнитель1",
            year: "Год выпуска1"
        },
        {
            title: "Название альбома2",
            artist: "Исполнитель2",
            year: "Год выпуска2"
        },
        {
            title: "Название альбома3",
            artist: "Исполнитель3",
            year: "Год выпуска3"
        }
    ],
    [Symbol.iterator]() {
        let index = 0;
        return {
            next: () => {
                if (index < this.albums.length) {
                    return { value: this.albums[index++], done: false }
                } else {
                    return { done: true }
                }
            }
        };
    }
};

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
};



// TASK 2

/**
Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.
*/

let chefSpecialization = new Map();
chefSpecialization.set('Виктор', 'специализация: Пицца')
    .set('Ольга', 'специализация: Суши')
    .set('Дмитрий', 'специализация: Десерты');

let dishChef = new Map();
dishChef.set('Пицца "Маргарита"', `повар: Виктор`)
    .set('Пицца "Пепперони"', 'повар: Виктор')
    .set('Суши "Филадельфия"', 'повар: Ольга')
    .set('Суши "Калифорния"', 'повар: Ольга')
    .set('Тирамису', 'повар: Дмитрий')
    .set('Чизкейк', 'повар: Дмитрий');

let clientOrders = new Map([
    [{ name: 'Алексей' }, ['Пицца "Пепперони"', 'Тирамису']],
    [{ name: 'Мария' }, ['Суши "Калифорния"', 'Пицца "Маргарита"']],
    [{ name: 'Ирина' }, ['Чизкейк']]
]);

console.log('\nСпециализация поваров:');
chefSpecialization.forEach((value, key) => {
    console.log(key + ' - ' + value);
});

console.log('\nБлюда и их повара:');
dishChef.forEach((value, key) => {
    console.log(key + ' - ' + value);
});

console.log('\nЗаказы клиентов:');
clientOrders.forEach((value, key) => {
    console.log('Клиент ' + key.name + ' заказал: ' + value);
});
